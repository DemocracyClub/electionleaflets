service:
  name: electionleaflets

provider:
  name: aws
  stage: ${opt:stage, staging}
  runtime: python3.8
  region: eu-west-1
  memorySize: 1536
  timeout: 30
  deploymentBucket:
    name: zappa-electionleaflets-eu-west-1
    deploymentPrefix: sls
  environment:
    DJANGO_SETTINGS_MODULE: electionleaflets.settings.zappa
    DATABASE_HOST: ${ssm:election_leaflets_${self:provider.stage}_DATABASE_HOST}
    DATABASE_NAME: ${ssm:election_leaflets_${self:provider.stage}_DATABASE_NAME}
    DATABASE_USER: ${ssm:election_leaflets_${self:provider.stage}_DATABASE_USER}
    DATABASE_PASS: ${ssm:election_leaflets_${self:provider.stage}_DATABASE_PASS}
    SENTRY_DSN: ${ssm:election_leaflets_${self:provider.stage}_SENTRY_DSN}
    MAPIT_API_KEY: ${ssm:election_leaflets_${self:provider.stage}_MAPIT_API_KEY}
    MAPIT_API_URL: ${ssm:election_leaflets_${self:provider.stage}_MAPIT_API_URL}
    DEVS_DC_AUTH_TOKEN: ${ssm:election_leaflets_${self:provider.stage}_DEVS_DC_AUTH_TOKEN}
    SERVERTYPE: AWS Lambda
    STRIP_STAGE_PATH: yes
    STATICFILES_MANIFEST_NAME: staticfiles_${self:provider.stage}.json
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::data.electionleaflets.org'
        - 'arn:aws:s3:::data.electionleaflets.org/*'
    - Effect: 'Allow'
      Action:
        - 'ses:GetSendQuota'
        - 'ses:SendEmail'
        - 'ses:SendRawEmail'
      Resource:
        - '*'

  vpc:
    securityGroupIds:
      - sg-a0a784d9
    subnetIds:
      - subnet-aaaa6bcd
      - subnet-b73df0fe

package:
  include:
    - electionleaflets/apps/**
    - electionleaflets/settings/__init__.py
    - electionleaflets/settings/base.py
    - electionleaflets/settings/zappa.py
    - electionleaflets/templates/**
    - electionleaflets/third_party/**
    - electionleaflets/*
    - manage.py
    - libgeos*
  exclude:
    - '**'

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: ANY {proxy+}
    layers:
      - arn:aws:lambda:eu-west-1:929325949831:layer:pdal:1
      - {Ref: PythonRequirementsLambdaLayer}

custom:
  staging:
    domainName: staging.electionleaflets.org
    certificateArn: arn:aws:acm:us-east-1:929325949831:certificate/2db9e234-606d-4b11-a1c0-0a323462f6b1
  production:
    domainName: electionleaflets.org

  wsgi:
    app: electionleaflets.wsgi.application
  pythonRequirements:
    dockerizePip: true
    layer: true
    noDeploy:
      - lxml
      - faker
    slim: true
    slimPatternsAppendDefaults: false
    slimPatterns:
      - "**/faker/**/*"
      - "**/botocore/data/ec2/**/*"
      - "**/localflavor/locale/**/*"

  apigwBinary:
    types:
      - 'multipart/form-data'

  scripts:
    hooks:
      'deploy:createDeploymentArtifacts': env DEPLOYMENT=Yes STATICFILES_MANIFEST_NAME=staticfiles_${self:provider.stage}.json pipenv run python manage.py collectstatic --no-input

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-apigw-binary
  - serverless-plugin-scripts

# Generated by Django 4.2.16 on 2024-12-05 10:18

from django.db import migrations


def move_party_model_to_ynr_party(apps, schema_editor):
    Leaflet = apps.get_model("leaflets", "Leaflet")
    qs = (
        Leaflet.objects.exclude(publisher_person=None)
        .filter(people={})
        .select_related("publisher_person")
    )

    for leaflet in qs:
        # The old model only knew about one sender, the new one deal with a list
        # of senders. Assign the old remote ID to a list
        person_id = leaflet.publisher_person.remote_id

        # This is the most important thing to set, everything else
        # is a nice to have that we may as well do while we're here.
        # We can recover all other data from YNR later.
        leaflet.person_ids = [person_id]

        # Try to make a "ynr like" structure from the existing data
        party = None
        party_name = ""
        if leaflet.publisher_person.parties.exists() and leaflet.ynr_party_id:
            # Most of the time the party of the leaflet is set, but sometimes
            # we have to take the party form the person.
            # There is a chance of some errors here, but this isn't something
            # we can do much about. We're not making anything worse here, but
            # we are re-using existing data.
            # The times that this might go wrong are when we have no party data for
            # someone who stood for more than one party, and we have both leaflets.
            # I reckon this is very unlikely, so the risk is ok.
            leaflet_party_id = leaflet.ynr_party_id.replace("party:", "PP")
            leaflet_party_qs = leaflet.publisher_person.parties.filter(
                party_id=leaflet_party_id
            )
            if leaflet_party_qs.exists():
                leaflet_party = leaflet_party_qs.first()
            else:
                leaflet_party = leaflet.publisher_person.parties.first()
            party_name = leaflet_party.party_name
            party = {
                "url": f"https://candidates.democracyclub.org.uk/api/next/parties/{leaflet_party.party_id}/",
                "name": leaflet_party.party_name,
                "ec_id": leaflet_party_id,
                "legacy_slug": leaflet.ynr_party_id,
            }

        # The shape of this dict is simply the return value from YNR, only kept
        # for ease. The fields we rely on are stored on the leaflet directly
        # so missing values here have little impact. We can always back-fill
        # the data from YNR later, but better to have something here
        # than just remove it
        people_data = {
            person_id: {
                "party": party,
                "ballot": None,  # we don't store ballot data in the old model
                "person": {
                    "id": person_id,
                    "url": f"https://candidates.democracyclub.org.uk/api/next/people/{person_id}/",
                    "name": leaflet.publisher_person.name,
                },
                "party_name": party_name,
            }
        }
        leaflet.people = people_data

        leaflet.save()

    assert (
        Leaflet.objects.exclude(publisher_person=None).filter(people={}).count()
        == 0
    )


class Migration(migrations.Migration):
    dependencies = [
        ("leaflets", "0007_remove_leaflet_publisher_party_and_more"),
    ]

    operations = [
        migrations.RunPython(
            move_party_model_to_ynr_party, migrations.RunPython.noop
        ),
    ]

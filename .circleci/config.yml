version: 2.1

orbs:
  python: circleci/python@0.2.1
jobs:
  install_and_update_dependencies:
    docker:
      - image: circleci/python:3.8.6-node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "Pipfile.lock" }}-{{ checksum "thumbs/Pipfile.lock" }}
            - v2-dependencies-default
      - run: &install-pipenv sudo pip install -U urllib3 cryptography==3.3.2 pipenv --quiet --no-input
      - run: pipenv install --dev
      - run: pipenv check # before save_cache so an insecure cache is never saved
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - run: npm install
      - run: npm run build
      - persist_to_workspace:
          root: ~/repo/
          paths:
            - lambda-layers/DependenciesLayer/requirements.txt
      - save_cache:
          when: on_success
          paths:
            - ~/.local/share/virtualenvs/
          key: v2-dependencies-{{ checksum "Pipfile.lock" }}-{{ checksum "thumbs/Pipfile.lock" }}

  run-tests:
    docker:
      - image: circleci/python:3.8.6
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "Pipfile.lock" }}
            - v2-dependencies-default
      - run: *install-pipenv
#      - run:
#          command: pipenv run black-check
#          name: Black
      - run: pipenv run collectstatic
#      - run:
#          command: pipenv run pytest --flakes
#          name: Flakes
#      - run:
#          command: pipenv run pytest --junitxml=test-results/junit.xml --cov
#          name: Run Tests
#      - run: |
#          if [ -n "$COVERALLS_REPO_TOKEN" ]; then
#            pipenv run coveralls
#          else
#            echo "skipping coverage for forked PR"
#          fi
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  sam_build:
    docker:
      - image: amazon/aws-sam-cli-build-image-python3.8:latest
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run: pip install --upgrade pip
      - run: pip install -r lambda-layers/DependenciesLayer/requirements.txt
      - run: make collectstatic
      - run: sam build ${DASH_DASH_DEBUG}

      - persist_to_workspace:
          root: ~/repo/
          paths:
            - .aws-sam/build/
            - thumbs/.aws-sam/build/

  sam_deploy:
    docker:
      - image: circleci/python:3.8.6
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
      dc-django-settings-module:
        type: string
      dc-deploy-name:
        type: string
    environment:
      DJANGO_SETTINGS_MODULE: "<<parameters.dc-django-settings-module>>"
      SAM_CONFIG_FILE: samconfig.toml.d/ci-<<parameters.dc-environment>>.toml
      SAM_LAMBDA_CONFIG_ENV: <<parameters.dc-environment>>
      SAM_PUBLIC_CONFIG_ENV: <<parameters.dc-environment>>-public-access
      DC_DEPLOY_NAME: <<parameters.dc-deploy-name>>
      POSTGRES_DATABASE_NAME: <<parameters.dc-deploy-name>>
      LEAFLET_IMAGES_BUCKET_NAME: "electionleaflets-images-<<parameters.dc-deploy-name>>"
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "Pipfile.lock" }}
            - v2-dependencies-default
      - run: *install-pipenv

      - run: printenv DC_DEPLOY_NAME DJANGO_SETTINGS_MODULE SAM_CONFIG_FILE SAM_LAMBDA_CONFIG_ENV SAM_PUBLIC_CONFIG_ENV
      - run: printenv SECRET_KEY | md5sum
      - run: printenv AWS_ACCESS_KEY_ID | md5sum
      - run: sudo apt update && sudo apt install postgresql-client
      - run: PGPASSWORD=$DATABASE_PASS createdb --host $DATABASE_HOST --username $DATABASE_USER $POSTGRES_DATABASE_NAME || true
      - run:
          name: "pipenv run sam deploy # App: Lambda + API Gateway"
          command: |
            pipenv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/${SAM_CONFIG_FILE} \
              --config-env $SAM_LAMBDA_CONFIG_ENV \
              --template-file ~/repo/.aws-sam/build/template.yaml \
              --parameter-overrides " \
                 AppDjangoSettingsModule=$DJANGO_SETTINGS_MODULE \
                 AppSecretKey='$SECRET_KEY' \
                 AppSentryDSN='$SENTRY_DSN' \
                 GitHash='$CIRCLE_SHA1' \
                 AppIsBehindCloudFront=True \
                 AppLogRetentionDays=60 \
                 AppPostgresHost='$DATABASE_HOST' \
                 AppPostgresDatabaseName='$POSTGRES_DATABASE_NAME' \
                 AppPostgresPassword='$DATABASE_PASS' \
                 AppSamLambdaConfigEnv='$SAM_LAMBDA_CONFIG_ENV' \
                 AppDomain='$PUBLIC_FQDN' \
                 AppLeafletImagesBucketName='$LEAFLET_IMAGES_BUCKET_NAME' \
                "
      - run: pipenv run migratedb
      - run: pipenv run createcachetable
      - run: echo $LEAFLET_IMAGES_BUCKET_NAME > thumbs/LEAFLET_IMAGES_BUCKET_NAME
      - run: make thumbs/requirements.txt
      - run: pipenv run thumbs_sam_build
      - run:
          name: "Deploy thumbs function"
          command: |
            pipenv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/thumbs/${SAM_CONFIG_FILE} \
              --config-env $SAM_LAMBDA_CONFIG_ENV \
              --template-file ~/repo/thumbs/.aws-sam/build/ThumbsFunction/template.yml \
              --region eu-west-2 \
              --s3-bucket=election-leaflets-deployment-artifacts-staging-238m322

      - run:
          name: "Deploy thumbs function to eu-weat-1 for lambda@edge"
          command: |
            pipenv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/thumbs/${SAM_CONFIG_FILE} \
              --config-env $SAM_LAMBDA_CONFIG_ENV \
              --template-file ~/repo/thumbs/.aws-sam/build/ThumbsFunction/template.yml \
              --region us-east-1


      - run:
          name: "pipenv run sam deploy # Public access: CDN + DNS"
          no_output_timeout: 20m # CloudFront can take longer than CircleCI's 10m default
          command: |
            pipenv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/${SAM_CONFIG_FILE} \
              --config-env $SAM_PUBLIC_CONFIG_ENV \
              --template-file ~/repo/public-access-template.yaml \
              --parameter-overrides " \
                 StackNameSuffix=<<parameters.dc-environment>> \
                 CertificateArn=$CERTIFICATE_ARN \
                 PublicFqdn=$PUBLIC_FQDN \
                 LeafletsBucketName=$LEAFLET_IMAGES_BUCKET_NAME
              "
      - run: pip install -U boto3 pipenv --quiet --no-input
      - run: python thumbs/attach_lambda_triggers.py
      - run:
          name: "Publish a new Sentry Release"
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            sentry-cli releases --org democracy-club-gp new $CIRCLE_SHA1 --project ec-api
            sentry-cli releases --org democracy-club-gp set-commits --auto $CIRCLE_SHA1
            sentry-cli releases --org democracy-club-gp finalize $CIRCLE_SHA1



workflows:
  main:
    jobs:
      - install_and_update_dependencies
      - run-tests:
          requires:
            - install_and_update_dependencies # tests need installed dev package set

      - sam_build:
          requires:
            - install_and_update_dependencies # DependenciesLayer build needs lambda-layers/DependenciesLayer/requirements.txt
            - run-tests                            # Function build needs aggregator/apps/api/v1/templates/api_docs_rendered.html

      - sam_deploy:
          name: sam_deploy_staging
          dc-environment: staging
          dc-deploy-name: staging
          dc-django-settings-module: electionleaflets.settings.base_lambda
          requires:
            - install_and_update_dependencies # SAM CLI is in the dev package set
            - run-tests                            # staging should only deploy if tests pass
            - sam_build                       # deploy needs .aws-sam/build/
          context: [ deployment-staging-election-leaflets ]
          filters: { branches: { only: [ master ] } }

      - sam_deploy:
          name: sam_deploy_production
          dc-environment: production
          dc-deploy-name: production
          dc-django-settings-module: electionleaflets.settings.base_lambda
          requires:
            - install_and_update_dependencies # SAM CLI is in the dev package set
            - run-tests                            # staging should only deploy if tests pass
            - sam_build                       # deploy needs .aws-sam/build/
            - sam_deploy_staging
          context: [ deployment-production-election-leaflets ]
          filters: { branches: { only: [ master ] } }

version: 2.1

orbs:
  python: circleci/python@2.1.1

commands:
  install_uv:
    steps:
      - run: pip install --upgrade uv">=0.5.12,<0.6.0"

jobs:
  install_and_update_dependencies:
    docker:
      - image: cimg/python:3.12-node
    working_directory: ~/repo
    executor: python/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v9-dependencies-{{ checksum "uv.lock" }}
            - v9-dependencies-default
      - install_uv
      - run:
          name: Set up virtual environment
          command: |
            uv sync --dev --no-python-downloads

      - run: ./scripts/code-check.sh
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - run: npm install
      - run: npm run build
      - run: uv run python manage.py collectstatic --settings electionleaflets.settings.testing
      - persist_to_workspace:
          root: ~/repo/
          paths:
            - lambda-layers/DependenciesLayer/requirements.txt
            - electionleaflets/static/
            - electionleaflets/assets/
      - run:
          name: Prune UV cache
          command: uv cache prune --ci
      - save_cache:
          when: on_success
          paths:
            - ./.venv
            - ./node_modules
            - $HOME/.cache/uv
          key: v9-dependencies-{{ checksum "uv.lock" }}
  run-tests:
    docker:
      - image: cimg/python:3.12-browsers
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
      - image: cimg/postgres:16.3
        environment:
          DATABASE_USER: circleci
          DATABASE_NAME: electionleaflets
    working_directory: ~/repo

    steps:
      - checkout
      - attach_workspace:
            at: ~/repo/
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v9-dependencies-{{ checksum "uv.lock" }}
      - install_uv
      - run: uv sync --no-python-downloads
      - run: uv run python manage.py check

      # TODO: enable this once we drop uk_political_parties package
      #- run: uv run python manage.py makemigrations --check

      # Run tests
      - run: uv run playwright install --with-deps chromium
      - run:
          name: Run tests
          command: |
            uv run pytest
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  sam_build:
    docker:
      - image: public.ecr.aws/sam/build-python3.12:latest
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - install_uv
      - run: uv sync --only-group deploy  --no-python-downloads
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - run: sam build

      - persist_to_workspace:
          root: ~/repo/
          paths:
            - .aws-sam/build/
            - thumbs/.aws-sam/build/
            - lambda-layers/DependenciesLayer/requirements.txt
            - electionleaflets/static/
  sam_deploy:
    docker:
      - image: public.ecr.aws/sam/build-python3.12:latest
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
      dc-django-settings-module:
        type: string
      dc-deploy-name:
        type: string
    environment:
      DJANGO_SETTINGS_MODULE: "<<parameters.dc-django-settings-module>>"
      SAM_CONFIG_FILE: samconfig.toml.d/ci-<<parameters.dc-environment>>.toml
      DC_ENVIRONMENT: <<parameters.dc-environment>>
      SAM_PUBLIC_CONFIG_ENV: <<parameters.dc-environment>>-public-access
      DC_DEPLOY_NAME: <<parameters.dc-deploy-name>>
      LEAFLET_IMAGES_BUCKET_NAME: "electionleaflets-images-<<parameters.dc-deploy-name>>"
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
            - v9-dependencies-{{ checksum "uv.lock" }}
            - v9-dependencies-default
      - run:
          name: Install UV
          command: |
            pip install --upgrade uv">=0.4.27,<0.5.0" --quiet --no-input
      - run: uv sync --only-group deploy  --no-python-downloads
      - run: printenv DC_DEPLOY_NAME DJANGO_SETTINGS_MODULE SAM_CONFIG_FILE DC_ENVIRONMENT SAM_PUBLIC_CONFIG_ENV
      - run: printenv SECRET_KEY | md5sum
      - run: printenv AWS_ACCESS_KEY_ID | md5sum
      - run:
          name: "sam deploy # App: Lambda + API Gateway"
          command: |
            uv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/${SAM_CONFIG_FILE} \
              --config-env $DC_ENVIRONMENT \
              --template-file ~/repo/.aws-sam/build/template.yaml \
              --parameter-overrides " \
                 AppDjangoSettingsModule=$DJANGO_SETTINGS_MODULE \
                 AppSecretKey='$SECRET_KEY' \
                 AppSentryDSN='$SENTRY_DSN' \
                 AppDCAPIToken='$DEVS_DC_AUTH_TOKEN' \
                 GitHash='$CIRCLE_SHA1' \
                 AppIsBehindCloudFront=True \
                 AppLogRetentionDays=60 \
                 AppPostgresHost='$DATABASE_HOST' \
                 AppPostgresDatabaseName='$DATABASE_NAME' \
                 AppPostgresPassword='$DATABASE_PASS' \
                 AppDomain='$PUBLIC_FQDN' \
                 AppLeafletImagesBucketName='$LEAFLET_IMAGES_BUCKET_NAME' \
                "
      - run: uv run python manage.py migrate
      - run: uv run python manage.py createcachetable
      - run: printenv LEAFLET_IMAGES_BUCKET_NAME
      - run: echo $LEAFLET_IMAGES_BUCKET_NAME > thumbs/LEAFLET_IMAGES_BUCKET_NAME
      - run: printenv SENTRY_DSN
      - run: echo $SENTRY_DSN > thumbs/SENTRY_DSN
      - run: make thumbs/requirements.txt
      - run: |
          cd thumbs
          uv run sam build

      - run:
          name: "Deploy thumbs function"
          command: |
            uv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/thumbs/${SAM_CONFIG_FILE} \
              --config-env $DC_ENVIRONMENT \
              --template-file ~/repo/thumbs/.aws-sam/build/ThumbsFunction/template.yml \
              --region eu-west-2 \
              --s3-bucket=$THUMBS_DEPLOY_BUCKET_NAME \
              --parameter-overrides " \
                  AppSentryDSN='$SENTRY_DSN' \
                  AppSentryLayer='arn:aws:lambda:eu-west-2:943013980633:layer:SentryPythonServerlessSDK:137' \
                  "


      - run:
          name: "Deploy thumbs function to us-east-1 for lambda@edge"
          command: |
            uv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/thumbs/${SAM_CONFIG_FILE} \
              --config-env $DC_ENVIRONMENT \
              --template-file ~/repo/thumbs/.aws-sam/build/ThumbsFunction/template.yml \
              --region us-east-1 \
              --parameter-overrides " \
                  AppSentryDSN='$SENTRY_DSN' \
                  AppSentryLayer='arn:aws:lambda:us-east-1:943013980633:layer:SentryPythonServerlessSDK:137' \
                  "


      - run:
          name: "uv run sam deploy # Public access: CDN + DNS"
          no_output_timeout: 20m # CloudFront can take longer than CircleCI's 10m default
          command: |
            uv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/${SAM_CONFIG_FILE} \
              --config-env $SAM_PUBLIC_CONFIG_ENV \
              --template-file ~/repo/public-access-template.yaml \
              --parameter-overrides " \
                 StackNameSuffix=<<parameters.dc-environment>> \
                 CertificateArn=$CERTIFICATE_ARN \
                 PublicFqdn=$PUBLIC_FQDN \
                 LeafletsBucketName=$LEAFLET_IMAGES_BUCKET_NAME
              "
      - run: uv run python thumbs/attach_lambda_triggers.py
      - run:
          name: "Publish a new Sentry Release"
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            sentry-cli releases --org democracy-club-gp new $CIRCLE_SHA1 --project ec-api
            sentry-cli releases --org democracy-club-gp set-commits --auto $CIRCLE_SHA1
            sentry-cli releases --org democracy-club-gp finalize $CIRCLE_SHA1



workflows:
  main:
    jobs:
      - install_and_update_dependencies
      - run-tests:
          requires:
            - install_and_update_dependencies # tests need installed dev package set

      - sam_build:
          requires:
            - install_and_update_dependencies # DependenciesLayer build needs lambda-layers/DependenciesLayer/requirements.txt
            - run-tests                            # Function build needs aggregator/apps/api/v1/templates/api_docs_rendered.html

      - sam_deploy:
          name: sam_deploy_staging
          dc-environment: staging
          dc-deploy-name: staging
          dc-django-settings-module: electionleaflets.settings.base_lambda
          requires:
            - install_and_update_dependencies # SAM CLI is in the dev package set
            - run-tests                            # staging should only deploy if tests pass
            - sam_build                       # deploy needs .aws-sam/build/
          context: [ deployment-staging-election-leaflets ]
          filters: { branches: { only: [ master ] } }

      - sam_deploy:
          name: sam_deploy_production
          dc-environment: production
          dc-deploy-name: production
          dc-django-settings-module: electionleaflets.settings.base_lambda
          requires:
            - install_and_update_dependencies # SAM CLI is in the dev package set
            - run-tests                            # staging should only deploy if tests pass
            - sam_build                       # deploy needs .aws-sam/build/
            - sam_deploy_staging
          context: [ deployment-production-election-leaflets ]
          filters: { branches: { only: [ master ] } }

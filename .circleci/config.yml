# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: boffbowsh/circleci-python-geos:2.7.14-3.5.0
        env:
          - RUNNER=circleci

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: mdillon/postgis:9.6
        env:
          - POSTGRES_USER=postgres
          - PGUSER=postgres
          - POSTGRES_DB=electionleaflets_test
          - POSTGRES_PASSWORD=
      - image: redis

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/base.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python -m virtualenv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/base.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            flake8 electionleaflets
            coverage run --source=electionleaflets manage.py test
            coverage run -a --source=electionleaflets manage.py harvest

      - store_artifacts:
          path: test-reports
          destination: test-reports

